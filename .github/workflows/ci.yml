name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run tests
      run: npm test

    - name: Build package
      run: npm run build

    - name: Run health check
      run: npm run health-check

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.node-version == 20
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}

  docker-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: docker build -t aoe2-rms-parser .

    - name: Test Docker image
      run: |
        # Test that the Docker image can run basic commands
        docker run --rm aoe2-rms-parser node -e "console.log('Docker image works!')"
        
        # Test that the parser can be imported
        docker run --rm aoe2-rms-parser node -e "const { parse } = require('./dist/index.js'); console.log('Parser imported successfully!')"
        
        # Test basic parsing functionality
        docker run --rm aoe2-rms-parser node -e "const { parse } = require('./dist/index.js'); const result = parse('<PLAYER_SETUP>\nrandom_placement'); console.log('Parsing works:', result.ast ? 'SUCCESS' : 'FAILED');"
        
        # Test linting functionality
        docker run --rm aoe2-rms-parser node -e "const { parse, lint } = require('./dist/index.js'); const { ast } = parse('<PLAYER_SETUP>\nrandom_placement'); const errors = lint(ast); console.log('Linting works:', Array.isArray(errors) ? 'SUCCESS' : 'FAILED');"
