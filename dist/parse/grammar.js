"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
// Bypasses TS6133. Allow declared but unused functions.
// @ts-ignore
function id(d) { return d[0]; }
const { lexer } = require('./lexer');
;
;
;
;
const grammar = {
    Lexer: lexer,
    ParserRules: [
        { "name": "Script$ebnf$1", "symbols": ["__"], "postprocess": id },
        { "name": "Script$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "Script$ebnf$2$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "Script$ebnf$2$subexpression$1$ebnf$1$subexpression$1", "symbols": ["TopLevelLine", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "Script$ebnf$2$subexpression$1$ebnf$1", "symbols": ["Script$ebnf$2$subexpression$1$ebnf$1", "Script$ebnf$2$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "Script$ebnf$2$subexpression$1$ebnf$2", "symbols": [(lexer.has("eol") ? { type: "eol" } : eol)], "postprocess": id },
        { "name": "Script$ebnf$2$subexpression$1$ebnf$2", "symbols": [], "postprocess": () => null },
        { "name": "Script$ebnf$2$subexpression$1", "symbols": ["Script$ebnf$2$subexpression$1$ebnf$1", "TopLevelLine", "Script$ebnf$2$subexpression$1$ebnf$2"] },
        { "name": "Script$ebnf$2", "symbols": ["Script$ebnf$2$subexpression$1"], "postprocess": id },
        { "name": "Script$ebnf$2", "symbols": [], "postprocess": () => null },
        { "name": "Script$ebnf$3$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "Script$ebnf$3$subexpression$1$ebnf$1$subexpression$1", "symbols": ["Section", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "Script$ebnf$3$subexpression$1$ebnf$1", "symbols": ["Script$ebnf$3$subexpression$1$ebnf$1", "Script$ebnf$3$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "Script$ebnf$3$subexpression$1$ebnf$2", "symbols": [(lexer.has("eol") ? { type: "eol" } : eol)], "postprocess": id },
        { "name": "Script$ebnf$3$subexpression$1$ebnf$2", "symbols": [], "postprocess": () => null },
        { "name": "Script$ebnf$3$subexpression$1", "symbols": ["Script$ebnf$3$subexpression$1$ebnf$1", "Section", "Script$ebnf$3$subexpression$1$ebnf$2"] },
        { "name": "Script$ebnf$3", "symbols": ["Script$ebnf$3$subexpression$1"], "postprocess": id },
        { "name": "Script$ebnf$3", "symbols": [], "postprocess": () => null },
        { "name": "Script", "symbols": ["Script$ebnf$1", "Script$ebnf$2", "Script$ebnf$3"] },
        { "name": "TopLevelLine$macrocall$2$subexpression$1", "symbols": ["Command"] },
        { "name": "TopLevelLine$macrocall$2$subexpression$1", "symbols": ["ConstDefinition"] },
        { "name": "TopLevelLine$macrocall$2$subexpression$1", "symbols": ["FlagDefinition"] },
        { "name": "TopLevelLine$macrocall$2$subexpression$1", "symbols": ["IncludeDrs"] },
        { "name": "TopLevelLine$macrocall$2$subexpression$1", "symbols": ["TopLevelIf"] },
        { "name": "TopLevelLine$macrocall$2$subexpression$1", "symbols": ["TopLevelRandom"] },
        { "name": "TopLevelLine$macrocall$2", "symbols": ["TopLevelLine$macrocall$2$subexpression$1"] },
        { "name": "TopLevelLine$macrocall$1$ebnf$1", "symbols": [] },
        { "name": "TopLevelLine$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [(lexer.has("space") ? { type: "space" } : space)], "postprocess": id },
        { "name": "TopLevelLine$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "TopLevelLine$macrocall$1$ebnf$1$subexpression$1", "symbols": ["MultilineComment", "TopLevelLine$macrocall$1$ebnf$1$subexpression$1$ebnf$1"] },
        { "name": "TopLevelLine$macrocall$1$ebnf$1", "symbols": ["TopLevelLine$macrocall$1$ebnf$1", "TopLevelLine$macrocall$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "TopLevelLine$macrocall$1$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "TopLevelLine$macrocall$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [(lexer.has("space") ? { type: "space" } : space)], "postprocess": id },
        { "name": "TopLevelLine$macrocall$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "TopLevelLine$macrocall$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["TopLevelLine$macrocall$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "MultilineComment"] },
        { "name": "TopLevelLine$macrocall$1$subexpression$1$ebnf$1", "symbols": ["TopLevelLine$macrocall$1$subexpression$1$ebnf$1", "TopLevelLine$macrocall$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "TopLevelLine$macrocall$1$subexpression$1", "symbols": ["TopLevelLine$macrocall$2", "TopLevelLine$macrocall$1$subexpression$1$ebnf$1"] },
        { "name": "TopLevelLine$macrocall$1$subexpression$1", "symbols": ["MultilineComment"] },
        { "name": "TopLevelLine$macrocall$1", "symbols": ["TopLevelLine$macrocall$1$ebnf$1", "TopLevelLine$macrocall$1$subexpression$1"] },
        { "name": "TopLevelLine", "symbols": ["TopLevelLine$macrocall$1"] },
        { "name": "TopLevelIf$macrocall$2", "symbols": ["TopLevelLine"] },
        { "name": "TopLevelIf$macrocall$3", "symbols": ["Section"] },
        { "name": "TopLevelIf$macrocall$1$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "TopLevelIf$macrocall$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["TopLevelIf$macrocall$2", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "TopLevelIf$macrocall$1$subexpression$1$ebnf$1", "symbols": ["TopLevelIf$macrocall$1$subexpression$1$ebnf$1", "TopLevelIf$macrocall$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "TopLevelIf$macrocall$1$subexpression$1$ebnf$2", "symbols": [] },
        { "name": "TopLevelIf$macrocall$1$subexpression$1$ebnf$2$subexpression$1", "symbols": ["TopLevelIf$macrocall$3", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "TopLevelIf$macrocall$1$subexpression$1$ebnf$2", "symbols": ["TopLevelIf$macrocall$1$subexpression$1$ebnf$2", "TopLevelIf$macrocall$1$subexpression$1$ebnf$2$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "TopLevelIf$macrocall$1$subexpression$1", "symbols": ["TopLevelIf$macrocall$1$subexpression$1$ebnf$1", "TopLevelIf$macrocall$1$subexpression$1$ebnf$2"] },
        { "name": "TopLevelIf$macrocall$1$ebnf$1", "symbols": [] },
        { "name": "TopLevelIf$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "TopLevelIf$macrocall$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["TopLevelIf$macrocall$2", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "TopLevelIf$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["TopLevelIf$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "TopLevelIf$macrocall$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "TopLevelIf$macrocall$1$ebnf$1$subexpression$1$ebnf$2", "symbols": [] },
        { "name": "TopLevelIf$macrocall$1$ebnf$1$subexpression$1$ebnf$2$subexpression$1", "symbols": ["TopLevelIf$macrocall$3", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "TopLevelIf$macrocall$1$ebnf$1$subexpression$1$ebnf$2", "symbols": ["TopLevelIf$macrocall$1$ebnf$1$subexpression$1$ebnf$2", "TopLevelIf$macrocall$1$ebnf$1$subexpression$1$ebnf$2$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "TopLevelIf$macrocall$1$ebnf$1$subexpression$1", "symbols": [(lexer.has("elseifToken") ? { type: "elseifToken" } : elseifToken), (lexer.has("space") ? { type: "space" } : space), (lexer.has("identifier") ? { type: "identifier" } : identifier), "__", "TopLevelIf$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "TopLevelIf$macrocall$1$ebnf$1$subexpression$1$ebnf$2"] },
        { "name": "TopLevelIf$macrocall$1$ebnf$1", "symbols": ["TopLevelIf$macrocall$1$ebnf$1", "TopLevelIf$macrocall$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "TopLevelIf$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "TopLevelIf$macrocall$1$ebnf$2$subexpression$1$ebnf$1$subexpression$1", "symbols": ["TopLevelIf$macrocall$2", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "TopLevelIf$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "symbols": ["TopLevelIf$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "TopLevelIf$macrocall$1$ebnf$2$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "TopLevelIf$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "symbols": [] },
        { "name": "TopLevelIf$macrocall$1$ebnf$2$subexpression$1$ebnf$2$subexpression$1", "symbols": ["TopLevelIf$macrocall$3", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "TopLevelIf$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "symbols": ["TopLevelIf$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "TopLevelIf$macrocall$1$ebnf$2$subexpression$1$ebnf$2$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "TopLevelIf$macrocall$1$ebnf$2$subexpression$1", "symbols": [(lexer.has("elseToken") ? { type: "elseToken" } : elseToken), "__", "TopLevelIf$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "TopLevelIf$macrocall$1$ebnf$2$subexpression$1$ebnf$2"] },
        { "name": "TopLevelIf$macrocall$1$ebnf$2", "symbols": ["TopLevelIf$macrocall$1$ebnf$2$subexpression$1"], "postprocess": id },
        { "name": "TopLevelIf$macrocall$1$ebnf$2", "symbols": [], "postprocess": () => null },
        { "name": "TopLevelIf$macrocall$1", "symbols": [(lexer.has("ifToken") ? { type: "ifToken" } : ifToken), (lexer.has("space") ? { type: "space" } : space), (lexer.has("identifier") ? { type: "identifier" } : identifier), "__", "TopLevelIf$macrocall$1$subexpression$1", "TopLevelIf$macrocall$1$ebnf$1", "TopLevelIf$macrocall$1$ebnf$2", (lexer.has("endifToken") ? { type: "endifToken" } : endifToken)] },
        { "name": "TopLevelIf", "symbols": ["TopLevelIf$macrocall$1"] },
        { "name": "TopLevelRandom$macrocall$2", "symbols": ["TopLevelLine"] },
        { "name": "TopLevelRandom$macrocall$3", "symbols": ["Section"] },
        { "name": "TopLevelRandom$macrocall$1$ebnf$1", "symbols": [] },
        { "name": "TopLevelRandom$macrocall$1$ebnf$1$subexpression$1", "symbols": ["MultilineComment", "__"] },
        { "name": "TopLevelRandom$macrocall$1$ebnf$1", "symbols": ["TopLevelRandom$macrocall$1$ebnf$1", "TopLevelRandom$macrocall$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "TopLevelRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "TopLevelRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$1$subexpression$1", "symbols": ["TopLevelRandom$macrocall$2", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "TopLevelRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "symbols": ["TopLevelRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "TopLevelRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "TopLevelRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "symbols": [] },
        { "name": "TopLevelRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$2$subexpression$1", "symbols": ["TopLevelRandom$macrocall$3", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "TopLevelRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "symbols": ["TopLevelRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "TopLevelRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$2$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "TopLevelRandom$macrocall$1$ebnf$2$subexpression$1", "symbols": [(lexer.has("percentChance") ? { type: "percentChance" } : percentChance), (lexer.has("space") ? { type: "space" } : space), (lexer.has("int") ? { type: "int" } : int), "__", "TopLevelRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "TopLevelRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$2"] },
        { "name": "TopLevelRandom$macrocall$1$ebnf$2", "symbols": ["TopLevelRandom$macrocall$1$ebnf$2$subexpression$1"] },
        { "name": "TopLevelRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$1", "symbols": [] },
        { "name": "TopLevelRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$1$subexpression$1", "symbols": ["TopLevelRandom$macrocall$2", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "TopLevelRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$1", "symbols": ["TopLevelRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$1", "TopLevelRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "TopLevelRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$2", "symbols": [] },
        { "name": "TopLevelRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$2$subexpression$1", "symbols": ["TopLevelRandom$macrocall$3", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "TopLevelRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$2", "symbols": ["TopLevelRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$2", "TopLevelRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$2$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "TopLevelRandom$macrocall$1$ebnf$2$subexpression$2", "symbols": [(lexer.has("percentChance") ? { type: "percentChance" } : percentChance), (lexer.has("space") ? { type: "space" } : space), (lexer.has("int") ? { type: "int" } : int), "__", "TopLevelRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$1", "TopLevelRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$2"] },
        { "name": "TopLevelRandom$macrocall$1$ebnf$2", "symbols": ["TopLevelRandom$macrocall$1$ebnf$2", "TopLevelRandom$macrocall$1$ebnf$2$subexpression$2"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "TopLevelRandom$macrocall$1", "symbols": [(lexer.has("startRandom") ? { type: "startRandom" } : startRandom), (lexer.has("eol") ? { type: "eol" } : eol), "TopLevelRandom$macrocall$1$ebnf$1", "TopLevelRandom$macrocall$1$ebnf$2", (lexer.has("endRandom") ? { type: "endRandom" } : endRandom)] },
        { "name": "TopLevelRandom", "symbols": ["TopLevelRandom$macrocall$1"] },
        { "name": "Section$ebnf$1$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "Section$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["SectionLine", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "Section$ebnf$1$subexpression$1$ebnf$1", "symbols": ["Section$ebnf$1$subexpression$1$ebnf$1", "Section$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "Section$ebnf$1$subexpression$1", "symbols": [(lexer.has("eol") ? { type: "eol" } : eol), "Section$ebnf$1$subexpression$1$ebnf$1", "SectionLine"] },
        { "name": "Section$ebnf$1", "symbols": ["Section$ebnf$1$subexpression$1"], "postprocess": id },
        { "name": "Section$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "Section", "symbols": [(lexer.has("lArrow") ? { type: "lArrow" } : lArrow), (lexer.has("identifier") ? { type: "identifier" } : identifier), (lexer.has("rArrow") ? { type: "rArrow" } : rArrow), "Section$ebnf$1"] },
        { "name": "SectionLine$macrocall$2$subexpression$1", "symbols": ["Command"] },
        { "name": "SectionLine$macrocall$2$subexpression$1", "symbols": ["ConditionalCommand"] },
        { "name": "SectionLine$macrocall$2$subexpression$1", "symbols": ["RandomCommand"] },
        { "name": "SectionLine$macrocall$2$subexpression$1", "symbols": ["ConstDefinition"] },
        { "name": "SectionLine$macrocall$2$subexpression$1", "symbols": ["FlagDefinition"] },
        { "name": "SectionLine$macrocall$2$subexpression$1", "symbols": ["IncludeDrs"] },
        { "name": "SectionLine$macrocall$2$subexpression$1", "symbols": ["SectionIf"] },
        { "name": "SectionLine$macrocall$2$subexpression$1", "symbols": ["SectionRandom"] },
        { "name": "SectionLine$macrocall$2", "symbols": ["SectionLine$macrocall$2$subexpression$1"] },
        { "name": "SectionLine$macrocall$1$ebnf$1", "symbols": [] },
        { "name": "SectionLine$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [(lexer.has("space") ? { type: "space" } : space)], "postprocess": id },
        { "name": "SectionLine$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "SectionLine$macrocall$1$ebnf$1$subexpression$1", "symbols": ["MultilineComment", "SectionLine$macrocall$1$ebnf$1$subexpression$1$ebnf$1"] },
        { "name": "SectionLine$macrocall$1$ebnf$1", "symbols": ["SectionLine$macrocall$1$ebnf$1", "SectionLine$macrocall$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "SectionLine$macrocall$1$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "SectionLine$macrocall$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [(lexer.has("space") ? { type: "space" } : space)], "postprocess": id },
        { "name": "SectionLine$macrocall$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "SectionLine$macrocall$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["SectionLine$macrocall$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "MultilineComment"] },
        { "name": "SectionLine$macrocall$1$subexpression$1$ebnf$1", "symbols": ["SectionLine$macrocall$1$subexpression$1$ebnf$1", "SectionLine$macrocall$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "SectionLine$macrocall$1$subexpression$1", "symbols": ["SectionLine$macrocall$2", "SectionLine$macrocall$1$subexpression$1$ebnf$1"] },
        { "name": "SectionLine$macrocall$1$subexpression$1", "symbols": ["MultilineComment"] },
        { "name": "SectionLine$macrocall$1", "symbols": ["SectionLine$macrocall$1$ebnf$1", "SectionLine$macrocall$1$subexpression$1"] },
        { "name": "SectionLine", "symbols": ["SectionLine$macrocall$1"] },
        { "name": "SectionIf$macrocall$2", "symbols": ["SectionLine"] },
        { "name": "SectionIf$macrocall$3", "symbols": ["Section"] },
        { "name": "SectionIf$macrocall$1$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "SectionIf$macrocall$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["SectionIf$macrocall$2", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "SectionIf$macrocall$1$subexpression$1$ebnf$1", "symbols": ["SectionIf$macrocall$1$subexpression$1$ebnf$1", "SectionIf$macrocall$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "SectionIf$macrocall$1$subexpression$1$ebnf$2", "symbols": [] },
        { "name": "SectionIf$macrocall$1$subexpression$1$ebnf$2$subexpression$1", "symbols": ["SectionIf$macrocall$3", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "SectionIf$macrocall$1$subexpression$1$ebnf$2", "symbols": ["SectionIf$macrocall$1$subexpression$1$ebnf$2", "SectionIf$macrocall$1$subexpression$1$ebnf$2$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "SectionIf$macrocall$1$subexpression$1", "symbols": ["SectionIf$macrocall$1$subexpression$1$ebnf$1", "SectionIf$macrocall$1$subexpression$1$ebnf$2"] },
        { "name": "SectionIf$macrocall$1$ebnf$1", "symbols": [] },
        { "name": "SectionIf$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "SectionIf$macrocall$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["SectionIf$macrocall$2", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "SectionIf$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["SectionIf$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "SectionIf$macrocall$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "SectionIf$macrocall$1$ebnf$1$subexpression$1$ebnf$2", "symbols": [] },
        { "name": "SectionIf$macrocall$1$ebnf$1$subexpression$1$ebnf$2$subexpression$1", "symbols": ["SectionIf$macrocall$3", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "SectionIf$macrocall$1$ebnf$1$subexpression$1$ebnf$2", "symbols": ["SectionIf$macrocall$1$ebnf$1$subexpression$1$ebnf$2", "SectionIf$macrocall$1$ebnf$1$subexpression$1$ebnf$2$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "SectionIf$macrocall$1$ebnf$1$subexpression$1", "symbols": [(lexer.has("elseifToken") ? { type: "elseifToken" } : elseifToken), (lexer.has("space") ? { type: "space" } : space), (lexer.has("identifier") ? { type: "identifier" } : identifier), "__", "SectionIf$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "SectionIf$macrocall$1$ebnf$1$subexpression$1$ebnf$2"] },
        { "name": "SectionIf$macrocall$1$ebnf$1", "symbols": ["SectionIf$macrocall$1$ebnf$1", "SectionIf$macrocall$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "SectionIf$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "SectionIf$macrocall$1$ebnf$2$subexpression$1$ebnf$1$subexpression$1", "symbols": ["SectionIf$macrocall$2", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "SectionIf$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "symbols": ["SectionIf$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "SectionIf$macrocall$1$ebnf$2$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "SectionIf$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "symbols": [] },
        { "name": "SectionIf$macrocall$1$ebnf$2$subexpression$1$ebnf$2$subexpression$1", "symbols": ["SectionIf$macrocall$3", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "SectionIf$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "symbols": ["SectionIf$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "SectionIf$macrocall$1$ebnf$2$subexpression$1$ebnf$2$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "SectionIf$macrocall$1$ebnf$2$subexpression$1", "symbols": [(lexer.has("elseToken") ? { type: "elseToken" } : elseToken), "__", "SectionIf$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "SectionIf$macrocall$1$ebnf$2$subexpression$1$ebnf$2"] },
        { "name": "SectionIf$macrocall$1$ebnf$2", "symbols": ["SectionIf$macrocall$1$ebnf$2$subexpression$1"], "postprocess": id },
        { "name": "SectionIf$macrocall$1$ebnf$2", "symbols": [], "postprocess": () => null },
        { "name": "SectionIf$macrocall$1", "symbols": [(lexer.has("ifToken") ? { type: "ifToken" } : ifToken), (lexer.has("space") ? { type: "space" } : space), (lexer.has("identifier") ? { type: "identifier" } : identifier), "__", "SectionIf$macrocall$1$subexpression$1", "SectionIf$macrocall$1$ebnf$1", "SectionIf$macrocall$1$ebnf$2", (lexer.has("endifToken") ? { type: "endifToken" } : endifToken)] },
        { "name": "SectionIf", "symbols": ["SectionIf$macrocall$1"] },
        { "name": "SectionRandom$macrocall$2", "symbols": ["SectionLine"] },
        { "name": "SectionRandom$macrocall$3", "symbols": ["Section"] },
        { "name": "SectionRandom$macrocall$1$ebnf$1", "symbols": [] },
        { "name": "SectionRandom$macrocall$1$ebnf$1$subexpression$1", "symbols": ["MultilineComment", "__"] },
        { "name": "SectionRandom$macrocall$1$ebnf$1", "symbols": ["SectionRandom$macrocall$1$ebnf$1", "SectionRandom$macrocall$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "SectionRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "SectionRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$1$subexpression$1", "symbols": ["SectionRandom$macrocall$2", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "SectionRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "symbols": ["SectionRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "SectionRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "SectionRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "symbols": [] },
        { "name": "SectionRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$2$subexpression$1", "symbols": ["SectionRandom$macrocall$3", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "SectionRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "symbols": ["SectionRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "SectionRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$2$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "SectionRandom$macrocall$1$ebnf$2$subexpression$1", "symbols": [(lexer.has("percentChance") ? { type: "percentChance" } : percentChance), (lexer.has("space") ? { type: "space" } : space), (lexer.has("int") ? { type: "int" } : int), "__", "SectionRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "SectionRandom$macrocall$1$ebnf$2$subexpression$1$ebnf$2"] },
        { "name": "SectionRandom$macrocall$1$ebnf$2", "symbols": ["SectionRandom$macrocall$1$ebnf$2$subexpression$1"] },
        { "name": "SectionRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$1", "symbols": [] },
        { "name": "SectionRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$1$subexpression$1", "symbols": ["SectionRandom$macrocall$2", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "SectionRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$1", "symbols": ["SectionRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$1", "SectionRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "SectionRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$2", "symbols": [] },
        { "name": "SectionRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$2$subexpression$1", "symbols": ["SectionRandom$macrocall$3", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "SectionRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$2", "symbols": ["SectionRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$2", "SectionRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$2$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "SectionRandom$macrocall$1$ebnf$2$subexpression$2", "symbols": [(lexer.has("percentChance") ? { type: "percentChance" } : percentChance), (lexer.has("space") ? { type: "space" } : space), (lexer.has("int") ? { type: "int" } : int), "__", "SectionRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$1", "SectionRandom$macrocall$1$ebnf$2$subexpression$2$ebnf$2"] },
        { "name": "SectionRandom$macrocall$1$ebnf$2", "symbols": ["SectionRandom$macrocall$1$ebnf$2", "SectionRandom$macrocall$1$ebnf$2$subexpression$2"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "SectionRandom$macrocall$1", "symbols": [(lexer.has("startRandom") ? { type: "startRandom" } : startRandom), (lexer.has("eol") ? { type: "eol" } : eol), "SectionRandom$macrocall$1$ebnf$1", "SectionRandom$macrocall$1$ebnf$2", (lexer.has("endRandom") ? { type: "endRandom" } : endRandom)] },
        { "name": "SectionRandom", "symbols": ["SectionRandom$macrocall$1"] },
        { "name": "Command$ebnf$1", "symbols": ["CommandBody"], "postprocess": id },
        { "name": "Command$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "Command", "symbols": ["Attribute", "Command$ebnf$1"] },
        { "name": "CommandLevelLine$macrocall$2$subexpression$1", "symbols": ["Attribute"] },
        { "name": "CommandLevelLine$macrocall$2$subexpression$1", "symbols": ["ConstDefinition"] },
        { "name": "CommandLevelLine$macrocall$2$subexpression$1", "symbols": ["FlagDefinition"] },
        { "name": "CommandLevelLine$macrocall$2$subexpression$1", "symbols": ["IncludeDrs"] },
        { "name": "CommandLevelLine$macrocall$2$subexpression$1", "symbols": ["CommandIf"] },
        { "name": "CommandLevelLine$macrocall$2$subexpression$1", "symbols": ["CommandRandom"] },
        { "name": "CommandLevelLine$macrocall$2", "symbols": ["CommandLevelLine$macrocall$2$subexpression$1"] },
        { "name": "CommandLevelLine$macrocall$1$ebnf$1", "symbols": [] },
        { "name": "CommandLevelLine$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [(lexer.has("space") ? { type: "space" } : space)], "postprocess": id },
        { "name": "CommandLevelLine$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "CommandLevelLine$macrocall$1$ebnf$1$subexpression$1", "symbols": ["MultilineComment", "CommandLevelLine$macrocall$1$ebnf$1$subexpression$1$ebnf$1"] },
        { "name": "CommandLevelLine$macrocall$1$ebnf$1", "symbols": ["CommandLevelLine$macrocall$1$ebnf$1", "CommandLevelLine$macrocall$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "CommandLevelLine$macrocall$1$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "CommandLevelLine$macrocall$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [(lexer.has("space") ? { type: "space" } : space)], "postprocess": id },
        { "name": "CommandLevelLine$macrocall$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "CommandLevelLine$macrocall$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["CommandLevelLine$macrocall$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "MultilineComment"] },
        { "name": "CommandLevelLine$macrocall$1$subexpression$1$ebnf$1", "symbols": ["CommandLevelLine$macrocall$1$subexpression$1$ebnf$1", "CommandLevelLine$macrocall$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "CommandLevelLine$macrocall$1$subexpression$1", "symbols": ["CommandLevelLine$macrocall$2", "CommandLevelLine$macrocall$1$subexpression$1$ebnf$1"] },
        { "name": "CommandLevelLine$macrocall$1$subexpression$1", "symbols": ["MultilineComment"] },
        { "name": "CommandLevelLine$macrocall$1", "symbols": ["CommandLevelLine$macrocall$1$ebnf$1", "CommandLevelLine$macrocall$1$subexpression$1"] },
        { "name": "CommandLevelLine", "symbols": ["CommandLevelLine$macrocall$1"] },
        { "name": "CommandIf$macrocall$2", "symbols": ["CommandLevelLine"] },
        { "name": "CommandIf$macrocall$1$macrocall$2", "symbols": ["CommandIf$macrocall$2"] },
        { "name": "CommandIf$macrocall$1$macrocall$3", "symbols": [] },
        { "name": "CommandIf$macrocall$1$macrocall$1$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "CommandIf$macrocall$1$macrocall$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["CommandIf$macrocall$1$macrocall$2", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "CommandIf$macrocall$1$macrocall$1$subexpression$1$ebnf$1", "symbols": ["CommandIf$macrocall$1$macrocall$1$subexpression$1$ebnf$1", "CommandIf$macrocall$1$macrocall$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "CommandIf$macrocall$1$macrocall$1$subexpression$1$ebnf$2", "symbols": [] },
        { "name": "CommandIf$macrocall$1$macrocall$1$subexpression$1$ebnf$2$subexpression$1", "symbols": ["CommandIf$macrocall$1$macrocall$3", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "CommandIf$macrocall$1$macrocall$1$subexpression$1$ebnf$2", "symbols": ["CommandIf$macrocall$1$macrocall$1$subexpression$1$ebnf$2", "CommandIf$macrocall$1$macrocall$1$subexpression$1$ebnf$2$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "CommandIf$macrocall$1$macrocall$1$subexpression$1", "symbols": ["CommandIf$macrocall$1$macrocall$1$subexpression$1$ebnf$1", "CommandIf$macrocall$1$macrocall$1$subexpression$1$ebnf$2"] },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$1", "symbols": [] },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["CommandIf$macrocall$1$macrocall$2", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["CommandIf$macrocall$1$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "CommandIf$macrocall$1$macrocall$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$1$subexpression$1$ebnf$2", "symbols": [] },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$1$subexpression$1$ebnf$2$subexpression$1", "symbols": ["CommandIf$macrocall$1$macrocall$3", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$1$subexpression$1$ebnf$2", "symbols": ["CommandIf$macrocall$1$macrocall$1$ebnf$1$subexpression$1$ebnf$2", "CommandIf$macrocall$1$macrocall$1$ebnf$1$subexpression$1$ebnf$2$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$1$subexpression$1", "symbols": [(lexer.has("elseifToken") ? { type: "elseifToken" } : elseifToken), (lexer.has("space") ? { type: "space" } : space), (lexer.has("identifier") ? { type: "identifier" } : identifier), "__", "CommandIf$macrocall$1$macrocall$1$ebnf$1$subexpression$1$ebnf$1", "CommandIf$macrocall$1$macrocall$1$ebnf$1$subexpression$1$ebnf$2"] },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$1", "symbols": ["CommandIf$macrocall$1$macrocall$1$ebnf$1", "CommandIf$macrocall$1$macrocall$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$1$subexpression$1", "symbols": ["CommandIf$macrocall$1$macrocall$2", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "symbols": ["CommandIf$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "CommandIf$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "symbols": [] },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$2$subexpression$1", "symbols": ["CommandIf$macrocall$1$macrocall$3", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "symbols": ["CommandIf$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "CommandIf$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$2$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$2$subexpression$1", "symbols": [(lexer.has("elseToken") ? { type: "elseToken" } : elseToken), "__", "CommandIf$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "CommandIf$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$2"] },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$2", "symbols": ["CommandIf$macrocall$1$macrocall$1$ebnf$2$subexpression$1"], "postprocess": id },
        { "name": "CommandIf$macrocall$1$macrocall$1$ebnf$2", "symbols": [], "postprocess": () => null },
        { "name": "CommandIf$macrocall$1$macrocall$1", "symbols": [(lexer.has("ifToken") ? { type: "ifToken" } : ifToken), (lexer.has("space") ? { type: "space" } : space), (lexer.has("identifier") ? { type: "identifier" } : identifier), "__", "CommandIf$macrocall$1$macrocall$1$subexpression$1", "CommandIf$macrocall$1$macrocall$1$ebnf$1", "CommandIf$macrocall$1$macrocall$1$ebnf$2", (lexer.has("endifToken") ? { type: "endifToken" } : endifToken)] },
        { "name": "CommandIf$macrocall$1", "symbols": ["CommandIf$macrocall$1$macrocall$1"] },
        { "name": "CommandIf", "symbols": ["CommandIf$macrocall$1"] },
        { "name": "CommandRandom$macrocall$2", "symbols": ["CommandLevelLine"] },
        { "name": "CommandRandom$macrocall$1$macrocall$2", "symbols": ["CommandRandom$macrocall$2"] },
        { "name": "CommandRandom$macrocall$1$macrocall$3", "symbols": [] },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$1", "symbols": [] },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$1$subexpression$1", "symbols": ["MultilineComment", "__"] },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$1", "symbols": ["CommandRandom$macrocall$1$macrocall$1$ebnf$1", "CommandRandom$macrocall$1$macrocall$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$1$subexpression$1", "symbols": ["CommandRandom$macrocall$1$macrocall$2", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "symbols": ["CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "symbols": [] },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$2$subexpression$1", "symbols": ["CommandRandom$macrocall$1$macrocall$3", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "symbols": ["CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$2", "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$2$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$1", "symbols": [(lexer.has("percentChance") ? { type: "percentChance" } : percentChance), (lexer.has("space") ? { type: "space" } : space), (lexer.has("int") ? { type: "int" } : int), "__", "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$1", "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$1$ebnf$2"] },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$2", "symbols": ["CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$1"] },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$2$ebnf$1", "symbols": [] },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$2$ebnf$1$subexpression$1", "symbols": ["CommandRandom$macrocall$1$macrocall$2", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$2$ebnf$1", "symbols": ["CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$2$ebnf$1", "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$2$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$2$ebnf$2", "symbols": [] },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$2$ebnf$2$subexpression$1", "symbols": ["CommandRandom$macrocall$1$macrocall$3", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$2$ebnf$2", "symbols": ["CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$2$ebnf$2", "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$2$ebnf$2$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$2", "symbols": [(lexer.has("percentChance") ? { type: "percentChance" } : percentChance), (lexer.has("space") ? { type: "space" } : space), (lexer.has("int") ? { type: "int" } : int), "__", "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$2$ebnf$1", "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$2$ebnf$2"] },
        { "name": "CommandRandom$macrocall$1$macrocall$1$ebnf$2", "symbols": ["CommandRandom$macrocall$1$macrocall$1$ebnf$2", "CommandRandom$macrocall$1$macrocall$1$ebnf$2$subexpression$2"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "CommandRandom$macrocall$1$macrocall$1", "symbols": [(lexer.has("startRandom") ? { type: "startRandom" } : startRandom), (lexer.has("eol") ? { type: "eol" } : eol), "CommandRandom$macrocall$1$macrocall$1$ebnf$1", "CommandRandom$macrocall$1$macrocall$1$ebnf$2", (lexer.has("endRandom") ? { type: "endRandom" } : endRandom)] },
        { "name": "CommandRandom$macrocall$1", "symbols": ["CommandRandom$macrocall$1$macrocall$1"] },
        { "name": "CommandRandom", "symbols": ["CommandRandom$macrocall$1"] },
        { "name": "ConditionalCommand$subexpression$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["Attribute", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "ConditionalCommand$subexpression$1$subexpression$1$ebnf$1", "symbols": ["ConditionalCommand$subexpression$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id },
        { "name": "ConditionalCommand$subexpression$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "ConditionalCommand$subexpression$1$subexpression$1", "symbols": ["ConditionalCommand$subexpression$1$subexpression$1$ebnf$1"] },
        { "name": "ConditionalCommand$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "ConditionalCommand$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["Attribute", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "ConditionalCommand$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["ConditionalCommand$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id },
        { "name": "ConditionalCommand$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "ConditionalCommand$subexpression$1$ebnf$1$subexpression$1", "symbols": [(lexer.has("elseifToken") ? { type: "elseifToken" } : elseifToken), (lexer.has("space") ? { type: "space" } : space), (lexer.has("identifier") ? { type: "identifier" } : identifier), "__", "ConditionalCommand$subexpression$1$ebnf$1$subexpression$1$ebnf$1"] },
        { "name": "ConditionalCommand$subexpression$1$ebnf$1", "symbols": ["ConditionalCommand$subexpression$1$ebnf$1", "ConditionalCommand$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "ConditionalCommand$subexpression$1$ebnf$2$subexpression$1$ebnf$1$subexpression$1", "symbols": ["Attribute", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "ConditionalCommand$subexpression$1$ebnf$2$subexpression$1$ebnf$1", "symbols": ["ConditionalCommand$subexpression$1$ebnf$2$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id },
        { "name": "ConditionalCommand$subexpression$1$ebnf$2$subexpression$1$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "ConditionalCommand$subexpression$1$ebnf$2$subexpression$1", "symbols": [(lexer.has("elseToken") ? { type: "elseToken" } : elseToken), "__", "ConditionalCommand$subexpression$1$ebnf$2$subexpression$1$ebnf$1"] },
        { "name": "ConditionalCommand$subexpression$1$ebnf$2", "symbols": ["ConditionalCommand$subexpression$1$ebnf$2$subexpression$1"], "postprocess": id },
        { "name": "ConditionalCommand$subexpression$1$ebnf$2", "symbols": [], "postprocess": () => null },
        { "name": "ConditionalCommand$subexpression$1", "symbols": [(lexer.has("ifToken") ? { type: "ifToken" } : ifToken), (lexer.has("space") ? { type: "space" } : space), (lexer.has("identifier") ? { type: "identifier" } : identifier), "__", "ConditionalCommand$subexpression$1$subexpression$1", "ConditionalCommand$subexpression$1$ebnf$1", "ConditionalCommand$subexpression$1$ebnf$2", (lexer.has("endifToken") ? { type: "endifToken" } : endifToken)] },
        { "name": "ConditionalCommand", "symbols": ["ConditionalCommand$subexpression$1", "CommandBody"] },
        { "name": "RandomCommand$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "RandomCommand$subexpression$1$ebnf$1$subexpression$1", "symbols": ["MultilineComment", "__"] },
        { "name": "RandomCommand$subexpression$1$ebnf$1", "symbols": ["RandomCommand$subexpression$1$ebnf$1", "RandomCommand$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "RandomCommand$subexpression$1$ebnf$2$subexpression$1$subexpression$1", "symbols": ["Attribute", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "RandomCommand$subexpression$1$ebnf$2$subexpression$1", "symbols": [(lexer.has("percentChance") ? { type: "percentChance" } : percentChance), (lexer.has("space") ? { type: "space" } : space), (lexer.has("int") ? { type: "int" } : int), "__", "RandomCommand$subexpression$1$ebnf$2$subexpression$1$subexpression$1"] },
        { "name": "RandomCommand$subexpression$1$ebnf$2", "symbols": ["RandomCommand$subexpression$1$ebnf$2$subexpression$1"] },
        { "name": "RandomCommand$subexpression$1$ebnf$2$subexpression$2$subexpression$1", "symbols": ["Attribute", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "RandomCommand$subexpression$1$ebnf$2$subexpression$2", "symbols": [(lexer.has("percentChance") ? { type: "percentChance" } : percentChance), (lexer.has("space") ? { type: "space" } : space), (lexer.has("int") ? { type: "int" } : int), "__", "RandomCommand$subexpression$1$ebnf$2$subexpression$2$subexpression$1"] },
        { "name": "RandomCommand$subexpression$1$ebnf$2", "symbols": ["RandomCommand$subexpression$1$ebnf$2", "RandomCommand$subexpression$1$ebnf$2$subexpression$2"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "RandomCommand$subexpression$1", "symbols": [(lexer.has("startRandom") ? { type: "startRandom" } : startRandom), (lexer.has("eol") ? { type: "eol" } : eol), "RandomCommand$subexpression$1$ebnf$1", "RandomCommand$subexpression$1$ebnf$2", (lexer.has("endRandom") ? { type: "endRandom" } : endRandom)] },
        { "name": "RandomCommand", "symbols": ["RandomCommand$subexpression$1", "CommandBody"] },
        { "name": "CommandBody$ebnf$1", "symbols": [] },
        { "name": "CommandBody$ebnf$1$subexpression$1$ebnf$1", "symbols": ["__"], "postprocess": id },
        { "name": "CommandBody$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "CommandBody$ebnf$1$subexpression$1", "symbols": ["CommandBody$ebnf$1$subexpression$1$ebnf$1", "MultilineComment"] },
        { "name": "CommandBody$ebnf$1", "symbols": ["CommandBody$ebnf$1", "CommandBody$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "CommandBody$ebnf$2", "symbols": ["__"], "postprocess": id },
        { "name": "CommandBody$ebnf$2", "symbols": [], "postprocess": () => null },
        { "name": "CommandBody$ebnf$3$subexpression$1$subexpression$1$ebnf$1", "symbols": [] },
        { "name": "CommandBody$ebnf$3$subexpression$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["CommandLevelLine", (lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "CommandBody$ebnf$3$subexpression$1$subexpression$1$ebnf$1", "symbols": ["CommandBody$ebnf$3$subexpression$1$subexpression$1$ebnf$1", "CommandBody$ebnf$3$subexpression$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "CommandBody$ebnf$3$subexpression$1$subexpression$1$ebnf$2", "symbols": [(lexer.has("eol") ? { type: "eol" } : eol)], "postprocess": id },
        { "name": "CommandBody$ebnf$3$subexpression$1$subexpression$1$ebnf$2", "symbols": [], "postprocess": () => null },
        { "name": "CommandBody$ebnf$3$subexpression$1$subexpression$1", "symbols": ["CommandBody$ebnf$3$subexpression$1$subexpression$1$ebnf$1", "CommandLevelLine", "CommandBody$ebnf$3$subexpression$1$subexpression$1$ebnf$2"] },
        { "name": "CommandBody$ebnf$3$subexpression$1", "symbols": ["__", "CommandBody$ebnf$3$subexpression$1$subexpression$1"] },
        { "name": "CommandBody$ebnf$3", "symbols": ["CommandBody$ebnf$3$subexpression$1"], "postprocess": id },
        { "name": "CommandBody$ebnf$3", "symbols": [], "postprocess": () => null },
        { "name": "CommandBody", "symbols": ["CommandBody$ebnf$1", "CommandBody$ebnf$2", (lexer.has("lCurly") ? { type: "lCurly" } : lCurly), "CommandBody$ebnf$3", (lexer.has("rCurly") ? { type: "rCurly" } : rCurly)] },
        { "name": "Attribute$ebnf$1", "symbols": [] },
        { "name": "Attribute$ebnf$1$subexpression$1$subexpression$1", "symbols": [(lexer.has("identifier") ? { type: "identifier" } : identifier)] },
        { "name": "Attribute$ebnf$1$subexpression$1$subexpression$1", "symbols": [(lexer.has("int") ? { type: "int" } : int)] },
        { "name": "Attribute$ebnf$1$subexpression$1", "symbols": [(lexer.has("space") ? { type: "space" } : space), "Attribute$ebnf$1$subexpression$1$subexpression$1"] },
        { "name": "Attribute$ebnf$1", "symbols": ["Attribute$ebnf$1", "Attribute$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "Attribute", "symbols": [(lexer.has("identifier") ? { type: "identifier" } : identifier), "Attribute$ebnf$1"] },
        { "name": "ConstDefinition", "symbols": [(lexer.has("constToken") ? { type: "constToken" } : constToken), (lexer.has("space") ? { type: "space" } : space), (lexer.has("identifier") ? { type: "identifier" } : identifier), (lexer.has("space") ? { type: "space" } : space), (lexer.has("int") ? { type: "int" } : int)] },
        { "name": "FlagDefinition", "symbols": [(lexer.has("define") ? { type: "define" } : define), (lexer.has("space") ? { type: "space" } : space), (lexer.has("identifier") ? { type: "identifier" } : identifier)] },
        { "name": "IncludeDrs$ebnf$1$subexpression$1", "symbols": [(lexer.has("space") ? { type: "space" } : space), (lexer.has("int") ? { type: "int" } : int)] },
        { "name": "IncludeDrs$ebnf$1", "symbols": ["IncludeDrs$ebnf$1$subexpression$1"], "postprocess": id },
        { "name": "IncludeDrs$ebnf$1", "symbols": [], "postprocess": () => null },
        { "name": "IncludeDrs", "symbols": [(lexer.has("includeDrs") ? { type: "includeDrs" } : includeDrs), (lexer.has("space") ? { type: "space" } : space), (lexer.has("identifier") ? { type: "identifier" } : identifier), "IncludeDrs$ebnf$1"] },
        { "name": "MultilineComment$ebnf$1", "symbols": [] },
        { "name": "MultilineComment$ebnf$1$subexpression$1", "symbols": [(lexer.has("commentText") ? { type: "commentText" } : commentText)] },
        { "name": "MultilineComment$ebnf$1$subexpression$1", "symbols": ["MultilineComment"] },
        { "name": "MultilineComment$ebnf$1", "symbols": ["MultilineComment$ebnf$1", "MultilineComment$ebnf$1$subexpression$1"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "MultilineComment", "symbols": [(lexer.has("commentStart") ? { type: "commentStart" } : commentStart), "MultilineComment$ebnf$1", (lexer.has("commentEnd") ? { type: "commentEnd" } : commentEnd)] },
        { "name": "__$ebnf$1$subexpression$1", "symbols": [(lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "__$ebnf$1$subexpression$1", "symbols": [(lexer.has("space") ? { type: "space" } : space)] },
        { "name": "__$ebnf$1", "symbols": ["__$ebnf$1$subexpression$1"] },
        { "name": "__$ebnf$1$subexpression$2", "symbols": [(lexer.has("eol") ? { type: "eol" } : eol)] },
        { "name": "__$ebnf$1$subexpression$2", "symbols": [(lexer.has("space") ? { type: "space" } : space)] },
        { "name": "__$ebnf$1", "symbols": ["__$ebnf$1", "__$ebnf$1$subexpression$2"], "postprocess": (d) => d[0].concat([d[1]]) },
        { "name": "__", "symbols": ["__$ebnf$1"] }
    ],
    ParserStart: "Script",
};
exports.default = grammar;
//# sourceMappingURL=grammar.js.map